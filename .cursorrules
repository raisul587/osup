# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.



# Lessons

## User Specified Lessons

- 
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes


# Scratchpad

Task: Break down the oneshot.py code into smaller modules while preserving all logic

Analysis:
The code can be broken down into these main components:

1. Network Address Module
- NetworkAddress class for MAC address handling

2. WPS Module
- WPSpin class for WPS pin generation and validation
- Pin generation algorithms
- Pin validation logic

3. WiFi Scanner Module  
- WiFiScanner class
- Network scanning and parsing
- Network selection interface

4. WPS Connection Module
- Companion class core functionality
- WPS connection handling
- Pixie dust attack logic

5. Utils Module
- Helper functions (ifaceUp, die, etc)
- Configuration handling
- Common utilities

6. Main Module
- Argument parsing
- Main program flow
- Entry point

Plan:
[X] Create src/ directory structure
[X] Create network_address.py module
[X] Create wps.py module
[X] Create wifi_scanner.py module
[X] Create wps_connection.py module
[X] Create utils.py module
[X] Create main.py module
[X] Create __init__.py module
[X] Create new entry point script
[X] Update imports and dependencies

All tasks completed! The code has been successfully modularized into:

1. src/network_address.py - NetworkAddress class
2. src/wps.py - WPS pin generation functionality
3. src/wifi_scanner.py - WiFi scanning functionality
4. src/wps_connection.py - WPS connection handling
5. src/utils.py - Helper functions
6. src/main.py - Main program logic
7. src/__init__.py - Package initialization
8. oneshot_modular.py - New entry point

The functionality remains exactly the same, but the code is now more organized and maintainable.